name: Consolidate Batches
description: Consolidate batch review results and generate AI summaries.

inputs:
  gemini_api_key:
    description: 'Gemini API key for generating summaries'
    required: true

runs:
  using: composite
  steps:
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'

    - name: Install Gemini CLI
      shell: bash
      run: |
        set -euo pipefail
        for i in 1 2 3; do
          if npm install -g @google/gemini-cli; then exit 0; fi
          echo "npm install failed, retrying ($((3-i)) left)"; sleep 5
        done
        exit 1

    - shell: bash
      env:
        GEMINI_API_KEY: ${{ inputs.gemini_api_key }}
      run: |
        set -euo pipefail
        
        echo "Starting batch consolidation..."
        mkdir -p consolidated
        
        # Get PR number for context
        PR_NUM="${{ github.event.pull_request.number || '' }}"
        
        # Create detailed review by combining all batch results
        echo "# AI Code Review - Detailed Report ${PR_NUM:+for PR #$PR_NUM}" > consolidated/DETAILED-REVIEW.md
        echo "" >> consolidated/DETAILED-REVIEW.md
        echo "*Generated on $(date -u '+%Y-%m-%d %H:%M:%S UTC')*" >> consolidated/DETAILED-REVIEW.md
        echo "" >> consolidated/DETAILED-REVIEW.md
        
        # Check if we have batch artifacts
        if [ -d "review-batch-*" ] || [ -f "reviews/summary.json" ]; then
          echo "Found batch results, consolidating..."
          
          # Get overall summary info
          echo "## 📊 Review Summary" >> consolidated/DETAILED-REVIEW.md
          echo "" >> consolidated/DETAILED-REVIEW.md
          
          # Collect batch statistics
          TOTAL_FILES=0
          TOTAL_PROCESSED=0
          TOTAL_FAILED=0
          BATCH_COUNT=0
          
          # Process each batch artifact
          for batch_dir in review-batch-*; do
            if [ -d "$batch_dir" ]; then
              BATCH_COUNT=$((BATCH_COUNT + 1))
              echo "Processing batch: $batch_dir"
              
              # Get batch summary
              if [ -f "$batch_dir/reviews/summary.json" ]; then
                BATCH_TOTAL=$(jq -r '.total' "$batch_dir/reviews/summary.json" 2>/dev/null || echo "0")
                BATCH_PROCESSED=$(jq -r '.processed' "$batch_dir/reviews/summary.json" 2>/dev/null || echo "0")
                BATCH_FAILED=$(jq -r '.failed' "$batch_dir/reviews/summary.json" 2>/dev/null || echo "0")
                
                TOTAL_FILES=$((TOTAL_FILES + BATCH_TOTAL))
                TOTAL_PROCESSED=$((TOTAL_PROCESSED + BATCH_PROCESSED))
                TOTAL_FAILED=$((TOTAL_FAILED + BATCH_FAILED))
                
                echo "- **Batch $BATCH_COUNT:** $BATCH_PROCESSED/$BATCH_TOTAL files processed" >> consolidated/DETAILED-REVIEW.md
              fi
            fi
          done
          
          # Add overall statistics
          echo "" >> consolidated/DETAILED-REVIEW.md
          echo "### Overall Statistics" >> consolidated/DETAILED-REVIEW.md
          echo "- **Total batches:** $BATCH_COUNT" >> consolidated/DETAILED-REVIEW.md
          echo "- **Total files reviewed:** $TOTAL_FILES" >> consolidated/DETAILED-REVIEW.md
          echo "- **Successfully processed:** $TOTAL_PROCESSED" >> consolidated/DETAILED-REVIEW.md
          echo "- **Failed:** $TOTAL_FAILED" >> consolidated/DETAILED-REVIEW.md
          echo "" >> consolidated/DETAILED-REVIEW.md
          
          # Combine all file reviews
          echo "## 📝 File Reviews" >> consolidated/DETAILED-REVIEW.md
          echo "" >> consolidated/DETAILED-REVIEW.md
          
          # Process each batch directory
          for batch_dir in review-batch-*; do
            if [ -d "$batch_dir" ]; then
              echo "### Batch $batch_dir" >> consolidated/DETAILED-REVIEW.md
              echo "" >> consolidated/DETAILED-REVIEW.md
              
              # Process each review file in the batch
              if [ -d "$batch_dir/reviews" ]; then
                for review_file in $(find "$batch_dir/reviews" -name "*.md" -type f | grep -v summary.json | sort); do
                  if [ -f "$review_file" ]; then
                    echo "Processing: $review_file"
                    cat "$review_file" >> consolidated/DETAILED-REVIEW.md
                    echo "" >> consolidated/DETAILED-REVIEW.md
                  fi
                done
              fi
            fi
          done
          
          # Also check for direct reviews directory (fallback)
          if [ -d "reviews" ] && [ $BATCH_COUNT -eq 0 ]; then
            echo "### Direct Reviews" >> consolidated/DETAILED-REVIEW.md
            echo "" >> consolidated/DETAILED-REVIEW.md
            
            for review_file in $(find reviews -name "*.md" -type f | grep -v summary.json | sort); do
              if [ -f "$review_file" ]; then
                echo "Processing: $review_file"
                cat "$review_file" >> consolidated/DETAILED-REVIEW.md
                echo "" >> consolidated/DETAILED-REVIEW.md
              fi
            done
          fi
          
          # Create detailed review first
          DETAILED_REVIEW_FILE="consolidated/DETAILED-REVIEW.md"
          
          # Create AI-generated summary using Gemini CLI
          echo "Generating AI summary of the review..."
          
          # Load summary prompt template
          SUMMARY_TEMPLATE_PATH="$(dirname "$0")/summary-prompt.md"
          if [ -f "$SUMMARY_TEMPLATE_PATH" ]; then
            SUMMARY_TEMPLATE=$(cat "$SUMMARY_TEMPLATE_PATH")
          else
            SUMMARY_TEMPLATE='You are a technical writer tasked with creating a concise summary of a code review.

## TASK
Summarize the following code review in under 500 words. Focus on the most important findings and actionable recommendations.

## REQUIREMENTS
- Keep it under 500 words
- Focus on critical issues and high-priority recommendations
- Use clear, professional language
- Structure with key findings first, then recommendations
- Include file names where relevant
- Be actionable and specific

## FORMAT
- Start with a brief overview
- List key findings by category (Security, Performance, Code Quality, etc.)
- Provide top 3-5 actionable recommendations
- End with overall assessment

## CODE REVIEW TO SUMMARIZE:
{{REVIEW_CONTENT}}

## SUMMARY (under 500 words):'
          fi
          
          # Replace template variable with actual review content
          SUMMARY_PROMPT=$(echo "$SUMMARY_TEMPLATE" | sed "s|{{REVIEW_CONTENT}}|$(cat "$DETAILED_REVIEW_FILE")|g")

          # Create summary using Gemini CLI
          SUMMARY_CONTENT=$(echo "$SUMMARY_PROMPT" | gemini --model gemini-2.5-pro --prompt - 2>/dev/null || echo "Summary generation failed")
          
          # Create summary file
          echo "# AI Code Review - Summary ${PR_NUM:+for PR #$PR_NUM}" > consolidated/SUMMARY.md
          echo "" >> consolidated/SUMMARY.md
          echo "*Generated on $(date -u '+%Y-%m-%d %H:%M:%S UTC')*" >> consolidated/SUMMARY.md
          echo "" >> consolidated/SUMMARY.md
          
          echo "## 📊 Review Statistics" >> consolidated/SUMMARY.md
          echo "" >> consolidated/SUMMARY.md
          echo "- **Total batches:** $BATCH_COUNT" >> consolidated/SUMMARY.md
          echo "- **Total files:** $TOTAL_FILES" >> consolidated/SUMMARY.md
          echo "- **Successfully reviewed:** $TOTAL_PROCESSED" >> consolidated/SUMMARY.md
          echo "- **Failed:** $TOTAL_FAILED" >> consolidated/SUMMARY.md
          echo "" >> consolidated/SUMMARY.md
          
          echo "## 🎯 Executive Summary" >> consolidated/SUMMARY.md
          echo "" >> consolidated/SUMMARY.md
          echo "$SUMMARY_CONTENT" >> consolidated/SUMMARY.md
          echo "" >> consolidated/SUMMARY.md
          
          echo "## 📋 All Reviewed Files" >> consolidated/SUMMARY.md
          echo "" >> consolidated/SUMMARY.md
          
          # List all reviewed files from all batches
          for batch_dir in review-batch-*; do
            if [ -d "$batch_dir" ] && [ -d "$batch_dir/reviews" ]; then
              for review_file in $(find "$batch_dir/reviews" -name "*.md" -type f | grep -v summary.json | sort); do
                if [ -f "$review_file" ]; then
                  filename=$(basename "$review_file" .md)
                  # Convert sanitized filename back to original path (approximate)
                  original_path=$(echo "$filename" | sed 's/_/\//g' | sed 's/^\.\///')
                  echo "- $original_path" >> consolidated/SUMMARY.md
                fi
              done
            fi
          done
          
          # Also check for direct reviews directory
          if [ -d "reviews" ] && [ $BATCH_COUNT -eq 0 ]; then
            for review_file in $(find reviews -name "*.md" -type f | grep -v summary.json | sort); do
              if [ -f "$review_file" ]; then
                filename=$(basename "$review_file" .md)
                original_path=$(echo "$filename" | sed 's/_/\//g' | sed 's/^\.\///')
                echo "- $original_path" >> consolidated/SUMMARY.md
              fi
            done
          fi
          
          echo "" >> consolidated/SUMMARY.md
          echo "---" >> consolidated/SUMMARY.md
          echo "*For detailed review comments and specific recommendations, see the full detailed review.*" >> consolidated/SUMMARY.md
          
        else
          echo "No batch results found to consolidate." >> consolidated/DETAILED-REVIEW.md
          echo "No batch results found to consolidate." >> consolidated/SUMMARY.md
        fi
        
        echo "🎉 Batch consolidation complete!"
        echo "📁 Detailed review: consolidated/DETAILED-REVIEW.md"
        echo "📋 Summary: consolidated/SUMMARY.md"
