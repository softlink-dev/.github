name: Consolidate Reviews
description: Combine individual file reviews into a consolidated detailed review and summary.

inputs:
  gemini_api_key:
    description: 'Gemini API key for generating summaries'
    required: true

runs:
  using: composite
  steps:
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'

    - name: Install Gemini CLI
      shell: bash
      run: |
        set -euo pipefail
        for i in 1 2 3; do
          if npm install -g @google/gemini-cli; then exit 0; fi
          echo "npm install failed, retrying ($((3-i)) left)"; sleep 5
        done
        exit 1

    - shell: bash
      env:
        GEMINI_API_KEY: ${{ inputs.gemini_api_key }}
      run: |
        set -euo pipefail
        
        echo "Starting review consolidation..."
        mkdir -p consolidated
        
        # Get PR number for context
        PR_NUM="${{ github.event.pull_request.number || '' }}"
        
        # Create detailed review by combining all file reviews
        echo "# AI Code Review - Detailed Report ${PR_NUM:+for PR #$PR_NUM}" > consolidated/DETAILED-REVIEW.md
        echo "" >> consolidated/DETAILED-REVIEW.md
        echo "*Generated on $(date -u '+%Y-%m-%d %H:%M:%S UTC')*" >> consolidated/DETAILED-REVIEW.md
        echo "" >> consolidated/DETAILED-REVIEW.md
        
        # Check if we have review files
        if find reviews -name "*.md" -type f | head -1 >/dev/null 2>&1; then
          echo "Found review files, consolidating..."
          
          # Get summary info
          if [ -f "reviews/summary.json" ]; then
            echo "## 📊 Review Summary" >> consolidated/DETAILED-REVIEW.md
            echo "" >> consolidated/DETAILED-REVIEW.md
            
            # Extract summary info from JSON
            TOTAL=$(jq -r '.total' reviews/summary.json 2>/dev/null || echo "unknown")
            PROCESSED=$(jq -r '.processed' reviews/summary.json 2>/dev/null || echo "unknown")
            FAILED=$(jq -r '.failed' reviews/summary.json 2>/dev/null || echo "unknown")
            
            echo "- **Total files reviewed:** $TOTAL" >> consolidated/DETAILED-REVIEW.md
            echo "- **Successfully processed:** $PROCESSED" >> consolidated/DETAILED-REVIEW.md
            echo "- **Failed:** $FAILED" >> consolidated/DETAILED-REVIEW.md
            echo "" >> consolidated/DETAILED-REVIEW.md
          fi
          
          # Combine all file reviews
          echo "## 📝 File Reviews" >> consolidated/DETAILED-REVIEW.md
          echo "" >> consolidated/DETAILED-REVIEW.md
          
          # Process each review file
          for review_file in $(find reviews -name "*.md" -type f | grep -v summary.json | sort); do
            if [ -f "$review_file" ]; then
              echo "Processing: $review_file"
              cat "$review_file" >> consolidated/DETAILED-REVIEW.md
              echo "" >> consolidated/DETAILED-REVIEW.md
            fi
          done
          
          # Create detailed review first
          DETAILED_REVIEW_FILE="consolidated/DETAILED-REVIEW.md"
          
          # Create AI-generated summary using Gemini CLI
          echo "Generating AI summary of the review..."
          
          # Load summary prompt template
          SUMMARY_TEMPLATE_PATH="$(dirname "$0")/summary-prompt.md"
          if [ -f "$SUMMARY_TEMPLATE_PATH" ]; then
            SUMMARY_TEMPLATE=$(cat "$SUMMARY_TEMPLATE_PATH")
          else
            SUMMARY_TEMPLATE="You are a technical writer tasked with creating a concise summary of a code review.

## TASK
Summarize the following code review in under 500 words. Focus on the most important findings and actionable recommendations.

## REQUIREMENTS
- Keep it under 500 words
- Focus on critical issues and high-priority recommendations
- Use clear, professional language
- Structure with key findings first, then recommendations
- Include file names where relevant
- Be actionable and specific

## FORMAT
- Start with a brief overview
- List key findings by category (Security, Performance, Code Quality, etc.)
- Provide top 3-5 actionable recommendations
- End with overall assessment

## CODE REVIEW TO SUMMARIZE:
REVIEW_CONTENT_PLACEHOLDER

## SUMMARY (under 500 words):"
          fi
          
          # Replace template variable with actual review content
          SUMMARY_PROMPT=$(echo "$SUMMARY_TEMPLATE" | sed "s|REVIEW_CONTENT_PLACEHOLDER|$(cat "$DETAILED_REVIEW_FILE")|g")

          # Create summary using Gemini CLI
          SUMMARY_CONTENT=$(echo "$SUMMARY_PROMPT" | gemini --model gemini-2.5-pro --prompt - 2>/dev/null || echo "Summary generation failed")
          
          # Create summary file
          echo "# AI Code Review - Summary ${PR_NUM:+for PR #$PR_NUM}" > consolidated/SUMMARY.md
          echo "" >> consolidated/SUMMARY.md
          echo "*Generated on $(date -u '+%Y-%m-%d %H:%M:%S UTC')*" >> consolidated/SUMMARY.md
          echo "" >> consolidated/SUMMARY.md

          if [ -f "reviews/summary.json" ]; then
            echo "## 📊 Review Statistics" >> consolidated/SUMMARY.md
            echo "" >> consolidated/SUMMARY.md
            echo "- **Total files:** $TOTAL" >> consolidated/SUMMARY.md
            echo "- **Successfully reviewed:** $PROCESSED" >> consolidated/SUMMARY.md
            echo "- **Failed:** $FAILED" >> consolidated/SUMMARY.md
            echo "" >> consolidated/SUMMARY.md
          fi

          echo "## 🎯 Executive Summary" >> consolidated/SUMMARY.md
          echo "" >> consolidated/SUMMARY.md
          echo "$SUMMARY_CONTENT" >> consolidated/SUMMARY.md
          echo "" >> consolidated/SUMMARY.md

          echo "## 📋 All Reviewed Files" >> consolidated/SUMMARY.md
          echo "" >> consolidated/SUMMARY.md

          # List all reviewed files
          for review_file in $(find reviews -name "*.md" -type f | grep -v summary.json | sort); do
            if [ -f "$review_file" ]; then
              filename=$(basename "$review_file" .md)
              # Convert sanitized filename back to original path (approximate)
              original_path=$(echo "$filename" | sed 's/_/\//g' | sed 's/^\.\///')
              echo "- $original_path" >> consolidated/SUMMARY.md
            fi
          done

          echo "" >> consolidated/SUMMARY.md
          echo "---" >> consolidated/SUMMARY.md
          echo "*For detailed review comments and specific recommendations, see the full detailed review.*" >> consolidated/SUMMARY.md
          
        else
          echo "No review files found." >> consolidated/DETAILED-REVIEW.md
          echo "No review files found." >> consolidated/SUMMARY.md
        fi
        
        echo "Consolidation complete!"
        echo "Files created:"
        echo "- consolidated/DETAILED-REVIEW.md"
        echo "- consolidated/SUMMARY.md"
