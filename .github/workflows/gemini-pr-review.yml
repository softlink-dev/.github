name: Gemini PR Review

on:
  workflow_call:
    inputs:
      model:
        description: "Gemini model to use"
        type: string
        default: gemini-2.5-pro
        required: false
      max_files:
        description: "Max number of changed files to self-read"
        type: string
        default: "25"
        required: false
      max_diff_lines:
        description: "Max unified diff lines to include"
        type: string
        default: "4000"
        required: false
      exclude_regex:
        description: "Regex of files/paths to skip"
        type: string
        default: '(^|/)(dist|build|node_modules|coverage|out|bin|obj|target|vendor)/|\.lock$|\.min\.(js|css)$|\.map$|\.png$|\.jpe?g$|\.gif$|\.svg$|\.pdf$|\.zip$|\.tar$|\.gz$|\.7z$|\.ico$|\.bmp$'
        required: false
      policy_path:
        description: "Path to repo/org review policy file"
        type: string
        default: '.github/review/REVIEW_POLICY.md'   # <-- quote the default path
        required: false
      control_repo_ref:
        description: "Branch/ref of the org control repo (.github)"
        type: string
        default: main
        required: false
    secrets:
      GEMINI_API_KEY:
        required: true

jobs:
  check-pat-token:
    runs-on: ubuntu-latest
    steps:
      - name: Check if PAT_TOKEN is set (caller)
        run: |
          if [ -z "${{ secrets.PAT_TOKEN }}" ]; then
            echo "PAT_TOKEN is NOT set or is empty!"
            exit 1
          else
            echo "PAT_TOKEN is set and non-empty (length: ${#PAT_TOKEN})"
          fi
  review:
    # Avoid re-running on our own bot commits (prevents loops)
    if: ${{ github.actor != 'github-actions[bot]' }}
    name: Review PR with Gemini
    runs-on: ubuntu-latest
    permissions:
      contents: write    # we commit review file
      pull-requests: read

    env:
      GEMINI_MODEL: ${{ inputs.model }}
      MAX_FILES: ${{ inputs.max_files }}
      MAX_DIFF_LINES: ${{ inputs.max_diff_lines }}
      EXCLUDE_REGEX: ${{ inputs.exclude_regex }}
      POLICY_PATH: ${{ inputs.policy_path }}
      CONTROL_REF: ${{ inputs.control_repo_ref }}

    steps:
      - name: Checkout PR head (so we can push to the branch)
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          ref: ${{ github.event.pull_request.head.ref || github.ref }}

      - name: Checkout org .github control repo (for default policy)
        continue-on-error: true
        uses: actions/checkout@v4
        with:
          repository: ${{ github.repository_owner }}/.github
          ref: ${{ env.CONTROL_REF }}
          path: __org_control
          fetch-depth: 1
          token: ${{ secrets.PAT_TOKEN }}

      - name: Resolve base/head SHAs
        id: shas
        shell: bash
        run: |
          set -euo pipefail
          if [ "${{ github.event_name }}" = "pull_request" ]; then
            BASE="${{ github.event.pull_request.base.sha }}"
            HEAD="${{ github.event.pull_request.head.sha }}"
          else
            git fetch origin "${{ github.event.repository.default_branch || 'main' }}"
            BASE="$(git rev-parse "origin/${{ github.event.repository.default_branch || 'main' }}")"
            HEAD="$(git rev-parse HEAD)"
          fi
          echo "BASE=$BASE" >> "$GITHUB_ENV"
          echo "HEAD=$HEAD" >> "$GITHUB_ENV"
          echo "Base: $BASE"
          echo "Head: $HEAD"

      - name: Gather changed files (filtered) and absolute paths
        id: files
        shell: bash
        run: |
          set -euo pipefail
          git diff --name-only --diff-filter=ACMRT "$BASE" "$HEAD" \
            | grep -Eiv "${EXCLUDE_REGEX}" \
            | head -n "${MAX_FILES}" > files.txt || true

          awk -v PFX="$GITHUB_WORKSPACE/" '{print PFX $0}' files.txt > abs-files.txt

          echo "Changed files (filtered):"
          cat files.txt || true

          {
            echo "### Files Gemini will self-read"
            if [ -s files.txt ]; then cat files.txt; else echo "_None_"; fi
          } >> "$GITHUB_STEP_SUMMARY"

      - name: Generate unified diff (unified=0) with guardrail
        shell: bash
        run: |
          set -euo pipefail
          git diff --unified=0 --no-color "$BASE" "$HEAD" > diff.patch
          LINES=$(wc -l < diff.patch || echo 0)
          if [ "$LINES" -gt "${MAX_DIFF_LINES}" ]; then
            echo "::warning::Diff has $LINES lines; truncating to ${MAX_DIFF_LINES}."
            head -n "${MAX_DIFF_LINES}" diff.patch > diff.truncated.patch && mv diff.truncated.patch diff.patch
          fi
          echo "### Diff lines included: $(wc -l < diff.patch)" >> "$GITHUB_STEP_SUMMARY"

      - name: Locate review policy (repo override or org default)
        id: policy
        shell: bash
        run: |
          set -euo pipefail
          if [ -f "$POLICY_PATH" ]; then
            echo "path=$POLICY_PATH" >> "$GITHUB_OUTPUT"
            echo "scope=repo" >> "$GITHUB_OUTPUT"
            echo "found=true" >> "$GITHUB_OUTPUT"
          elif [ -f "__org_control/$POLICY_PATH" ]; then
            echo "path=__org_control/$POLICY_PATH" >> "$GITHUB_OUTPUT"
            echo "scope=org" >> "$GITHUB_OUTPUT"
            echo "found=true" >> "$GITHUB_OUTPUT"
          else
            echo "found=false" >> "$GITHUB_OUTPUT"
          fi

      - name: Build prompt (include policy + self-read paths + diff)
        shell: bash
        run: |
          set -euo pipefail
          cat > prompt.md << 'PROMPT'
          You are an exacting senior C# code reviewer.

          If a review policy is provided below, follow it strictly. Then review the PR using:
            1) Self-reading of the listed absolute file paths for full context (post-change).
            2) The unified diff to focus on what changed.

          Deliverables (prioritized):
          1) High-risk bugs/security issues
          2) Correctness & logic errors
          3) API/contract or backward-compat breaks
          4) Performance & resource issues
          5) Concurrency/thread-safety problems
          6) Minimal tests to add (tiny code snippets)
          7) Targeted refactor suggestions (small, mechanical)
          8) Style/consistency nits (brief)

          Rules:
          - Use file tools to read files (absolute paths only). If a path is missing, say so.
          - Cite file paths and line numbers. For full-file remarks, cite file line numbers; for changes, cite diff hunks.
          - Skip generated/lock/binary files with a one-liner.
          - If context is insufficient, state exactly what you need.

          PROMPT

          if [ "${{ steps.policy.outputs.found }}" = "true" ]; then
            echo -e "\n--- BEGIN REVIEW POLICY (${{ steps.policy.outputs.scope }}) ---" >> prompt.md
            cat "${{ steps.policy.outputs.path }}" >> prompt.md
            echo -e "\n--- END REVIEW POLICY ---" >> prompt.md
          fi

          echo -e "\n--- BEGIN ABSOLUTE PATHS ---" >> prompt.md
          cat abs-files.txt >> prompt.md || true
          echo -e "\n--- END ABSOLUTE PATHS ---\n" >> prompt.md

          echo -e "\n--- BEGIN DIFF ---" >> prompt.md
          cat diff.patch >> prompt.md
          echo -e "\n--- END DIFF ---" >> prompt.md

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Install Gemini CLI
        run: npm install -g @google/gemini-cli

      - name: Run Gemini review (self-reads files)
        env:
          GEMINI_API_KEY: ${{ secrets.GEMINI_API_KEY }}
          GEMINI_MODEL: ${{ env.GEMINI_MODEL }}
        shell: bash
        run: |
          set -euo pipefail
          # Try preferred model, fall back gracefully
          gemini --yolo --model "$GEMINI_MODEL" --prompt "$(cat prompt.md)" > review.md \
            || gemini --yolo --model "gemini-2.0-pro" --prompt "$(cat prompt.md)" > review.md

          if [ ! -s review.md ]; then
            echo "Gemini produced no output. Check API key, model access, or rate limits." > review.md
          fi

          echo "### Gemini Review (first 80 lines)" >> "$GITHUB_STEP_SUMMARY"
          head -n 80 review.md >> "$GITHUB_STEP_SUMMARY"

      - name: Commit review result to PR branch
        if: ${{ github.event_name == 'pull_request' && !github.event.pull_request.head.repo.fork }}
        shell: bash
        run: |
          set -euo pipefail
          OUT_DIR=".github/review-results"
          OUT_FILE="$OUT_DIR/pr-${{ github.event.pull_request.number }}.md"
          mkdir -p "$OUT_DIR"
          mv review.md "$OUT_FILE"

          git config user.name "github-actions[bot]"
          git config user.email "41898282+github-actions[bot]@users.noreply.github.com"
          git add "$OUT_FILE"
          git commit -m "chore: add Gemini review for PR #${{ github.event.pull_request.number }} [skip ci]" || echo "No changes to commit"
          git push

      - name: Note if commit was skipped (forked PR)
        if: ${{ github.event_name == 'pull_request' && github.event.pull_request.head.repo.fork }}
        run: |
          echo "::notice::PR is from a fork; cannot push review file. The review is available in the job summary."
