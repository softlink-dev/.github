# .github/workflows/pr-review.yml
name: Gemini PR Review V2

on:
  pull_request:
    types: [opened, synchronize, reopened]
    paths-ignore:
      - '.github/review-results/**'   # avoid loop when the review file is committed
      - '**.md'                       # ignore documentation changes
      - 'docs/**'                     # ignore docs directory
      - '.gitignore'                  # ignore gitignore changes
      - 'LICENSE'                     # ignore license changes
  workflow_dispatch:
    inputs:
      force_review:
        description: 'Force review even for small changes'
        type: boolean
        default: true
      max_files_override:
        description: 'Override max files (1-15)'
        type: string
        default: '10'
      min_lines_threshold:
        description: 'Minimum lines changed to trigger review'
        type: string
        default: '5'

# FIXED: Proper permissions for the intended workflow behavior
permissions:
  contents: write              # CHANGED: Need write to commit review results
  pull-requests: read
  actions: read               # For artifact access

# FIXED: Match the reusable workflow's concurrency group exactly
concurrency:
  group: pr-${{ github.event.pull_request.number || github.run_id }}
  cancel-in-progress: true

jobs:
  # Pre-filter job to avoid unnecessary runs
  should-review:
    name: Determine if review is needed
    runs-on: ubuntu-latest
    timeout-minutes: 5
    outputs:
      should_run: ${{ steps.check.outputs.should_run }}
      files_changed: ${{ steps.check.outputs.files_changed }}
    steps:
      - name: Checkout PR
        uses: actions/checkout@v4
        with:
          fetch-depth: 2  # Need to compare with base

      - name: Check if review is warranted
        id: check
        shell: bash
        run: |
          set -euo pipefail
          
          # Skip for draft PRs unless forced
          if [ "${{ github.event.pull_request.draft }}" = "true" ] && [ "${{ github.event.inputs.force_review }}" != "true" ]; then
            echo "should_run=false" >> $GITHUB_OUTPUT
            echo "files_changed=0" >> $GITHUB_OUTPUT
            echo "::notice::Skipping review for draft PR"
            exit 0
          fi
          
          # Skip for very small PRs (unless forced)
          if [ "${{ github.event.inputs.force_review }}" != "true" ]; then
            additions=${{ github.event.pull_request.additions || 0 }}
            deletions=${{ github.event.pull_request.deletions || 0 }}
            total_changes=$((additions + deletions))
            min_threshold=${{ github.event.inputs.min_lines_threshold || '15' }}
            
            # Skip if total changes < threshold
            if [ "$total_changes" -lt "$min_threshold" ]; then
              echo "should_run=false" >> $GITHUB_OUTPUT
              echo "files_changed=0" >> $GITHUB_OUTPUT
              echo "::notice::Skipping review for small PR ($total_changes lines changed, threshold: $min_threshold)"
              exit 0
            fi
          fi
          
          # Count relevant files changed (fix newline issue)
          files_changed=$(git diff --name-only HEAD~1 HEAD | \
            grep -E '\.(py|js|ts|jsx|tsx|go|rs|java|cpp|c|h|php|rb|swift|kt|scala|cs)

  review:
    name: AI Code Review
    needs: should-review
    if: needs.should-review.outputs.should_run == 'true'
    uses: softlink-dev/.github/.github/workflows/gemini-pr-review-v2.yml@main
    secrets:
      GEMINI_API_KEY: ${{ secrets.GEMINI_API_KEY }}
      PAT_TOKEN: ${{ secrets.PAT_TOKEN }}  
    with:
      # OPTIMIZED: Much more conservative defaults
      model: gemini-2.5-pro
      max_files: ${{ github.event.inputs.max_files_override || '10' }}  # Reduced from 25
      max_diff_lines: "3000"       # Reduced from 4000
      max_commits: "10"            # Added limit
      
      # BATCH PROCESSING: Use the new batch parameters
      batch_size: "2"              # Process 2 files per batch
      max_parallel_batches: "2"    # Max 2 batches running at once
      
      # PERFORMANCE TUNING
      full_file_threshold_lines: "800"    # Reduced from 1200
      window_before: "40"                  # Reduced from 60
      window_after: "30"                   # Reduced from 40
      max_windowed_lines: "800"           # Reduced from 1200
      
      # OUTPUT: Start with artifact-only to test stability
      post_mode: "artifact_only"   # Change to "both" once stable
      
      # FILE FILTERING: More aggressive exclusion
      exclude_regex: '(^|/)(dist|build|node_modules|coverage|out|bin|obj|target|vendor|\.next|\.nuxt|public|static)/|\.lock$|\.min\.(js|css)$|\.map$|\.png$|\.jpe?g$|\.gif$|\.svg$|\.pdf$|\.zip$|\.tar$|\.gz$|\.7z$|\.ico$|\.bmp$|\.dll$|\.exe$|\.pdb$|package-lock\.json$|yarn\.lock$|Cargo\.lock$|\.generated\.'

  # Optional: Add a cleanup job for failed runs
  cleanup:
    name: Cleanup on failure
    needs: [should-review, review]
    if: always() && (failure() || cancelled())
    runs-on: ubuntu-latest
    timeout-minutes: 5
    steps:
      - name: Cancel related runs
        uses: actions/github-script@v7
        with:
          script: |
            const runs = await github.rest.actions.listWorkflowRuns({
              owner: context.repo.owner,
              repo: context.repo.repo,
              workflow_id: 'pr-review.yml',
              status: 'in_progress'
            });
            
            for (const run of runs.data.workflow_runs) {
              if (run.id !== context.runId && 
                  run.head_sha === context.sha) {
                console.log(`Cancelling run ${run.id}`);
                await github.rest.actions.cancelWorkflowRun({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  run_id: run.id
                });
              }
            }

      - name: Cleanup artifacts
        continue-on-error: true
        uses: actions/github-script@v7
        with:
          script: |
            const artifacts = await github.rest.actions.listWorkflowRunArtifacts({
              owner: context.repo.owner,
              repo: context.repo.repo,
              run_id: context.runId
            });
            
            for (const artifact of artifacts.data.artifacts) {
              if (artifact.name.startsWith('review-')) {
                console.log(`Cleaning up artifact ${artifact.name}`);
                await github.rest.actions.deleteArtifact({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  artifact_id: artifact.id
                });
              }
            } | \
            wc -l | tr -d ' \n' || echo "0")
          
          # Ensure it's a valid number
          if ! [[ "$files_changed" =~ ^[0-9]+$ ]]; then
            files_changed=0
          fi
          
          # Skip if no code files changed
          if [ "$files_changed" -eq 0 ]; then
            echo "should_run=false" >> $GITHUB_OUTPUT
            echo "files_changed=0" >> $GITHUB_OUTPUT
            echo "::notice::Skipping review - no code files changed"
            exit 0
          fi
          
          echo "should_run=true" >> $GITHUB_OUTPUT
          echo "files_changed=${files_changed}" >> $GITHUB_OUTPUT
          echo "::notice::Review warranted: ${files_changed} code files changed"

  review:
    name: AI Code Review
    needs: should-review
    if: needs.should-review.outputs.should_run == 'true'
    uses: softlink-dev/.github/.github/workflows/gemini-pr-review-v2.yml@main
    secrets:
      GEMINI_API_KEY: ${{ secrets.GEMINI_API_KEY }}
      PAT_TOKEN: ${{ secrets.PAT_TOKEN }}  
    with:
      # OPTIMIZED: Much more conservative defaults
      model: gemini-2.5-pro
      max_files: ${{ github.event.inputs.max_files_override || '10' }}  # Reduced from 25
      max_diff_lines: "3000"       # Reduced from 4000
      max_commits: "10"            # Added limit
      
      # BATCH PROCESSING: Use the new batch parameters
      batch_size: "2"              # Process 2 files per batch
      max_parallel_batches: "2"    # Max 2 batches running at once
      
      # PERFORMANCE TUNING
      full_file_threshold_lines: "800"    # Reduced from 1200
      window_before: "40"                  # Reduced from 60
      window_after: "30"                   # Reduced from 40
      max_windowed_lines: "800"           # Reduced from 1200
      
      # OUTPUT: Start with artifact-only to test stability
      post_mode: "artifact_only"   # Change to "both" once stable
      
      # FILE FILTERING: More aggressive exclusion
      exclude_regex: '(^|/)(dist|build|node_modules|coverage|out|bin|obj|target|vendor|\.next|\.nuxt|public|static)/|\.lock$|\.min\.(js|css)$|\.map$|\.png$|\.jpe?g$|\.gif$|\.svg$|\.pdf$|\.zip$|\.tar$|\.gz$|\.7z$|\.ico$|\.bmp$|\.dll$|\.exe$|\.pdb$|package-lock\.json$|yarn\.lock$|Cargo\.lock$|\.generated\.'

  # Optional: Add a cleanup job for failed runs
  cleanup:
    name: Cleanup on failure
    needs: [should-review, review]
    if: always() && (failure() || cancelled())
    runs-on: ubuntu-latest
    timeout-minutes: 5
    steps:
      - name: Cancel related runs
        uses: actions/github-script@v7
        with:
          script: |
            const runs = await github.rest.actions.listWorkflowRuns({
              owner: context.repo.owner,
              repo: context.repo.repo,
              workflow_id: 'pr-review.yml',
              status: 'in_progress'
            });
            
            for (const run of runs.data.workflow_runs) {
              if (run.id !== context.runId && 
                  run.head_sha === context.sha) {
                console.log(`Cancelling run ${run.id}`);
                await github.rest.actions.cancelWorkflowRun({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  run_id: run.id
                });
              }
            }

      - name: Cleanup artifacts
        continue-on-error: true
        uses: actions/github-script@v7
        with:
          script: |
            const artifacts = await github.rest.actions.listWorkflowRunArtifacts({
              owner: context.repo.owner,
              repo: context.repo.repo,
              run_id: context.runId
            });
            
            for (const artifact of artifacts.data.artifacts) {
              if (artifact.name.startsWith('review-')) {
                console.log(`Cleaning up artifact ${artifact.name}`);
                await github.rest.actions.deleteArtifact({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  artifact_id: artifact.id
                });
              }
            }
