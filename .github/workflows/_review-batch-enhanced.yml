name: Review Batch Enhanced

on:
  workflow_call:
    inputs:
      batch_json:
        type: string
        required: true
      model:
        type: string
        required: true
      max_diff_lines:
        type: string
        required: true
      full_file_threshold_lines:
        type: string
        required: true
      window_before:
        type: string
        required: true
      window_after:
        type: string
        required: true
      merge_gap_tolerance:
        type: string
        required: true
      max_windowed_lines:
        type: string
        required: true
      policy_path:
        type: string
        required: false
      policy_found:
        type: string
        required: false
      policy_scope:
        type: string
        required: false
      control_repo_ref:
        type: string
        required: true
    secrets:
      GEMINI_API_KEY:
        required: true
      PAT_TOKEN:
        required: true

jobs:
  review:
    runs-on: ubuntu-latest
    steps:


      - name: Checkout repo (full history for git show)
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Checkout org .github control repo (optional)
        continue-on-error: true
        uses: actions/checkout@v4
        with:
          repository: ${{ github.repository_owner }}/.github
          ref: ${{ inputs.control_repo_ref }}
          path: __org_control
          fetch-depth: 1
          token: ${{ secrets.PAT_TOKEN }}

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Install Gemini CLI (retry)
        shell: bash
        run: |
          set -euo pipefail
          for i in 1 2 3; do
            if npm install -g @google/gemini-cli; then exit 0; fi
            echo "npm install failed, retrying ($((3-i)) left)"; sleep 5
          done
          exit 1

      - name: Process batch
        uses: softlink-dev/.github/.github/actions/process-batch-enhanced@main
        with:
          batch_json: ${{ inputs.batch_json }}
          model: ${{ inputs.model }}
          max_diff_lines: ${{ inputs.max_diff_lines }}
          full_file_threshold_lines: ${{ inputs.full_file_threshold_lines }}
          window_before: ${{ inputs.window_before }}
          window_after: ${{ inputs.window_after }}
          merge_gap_tolerance: ${{ inputs.merge_gap_tolerance }}
          max_windowed_lines: ${{ inputs.max_windowed_lines }}
          policy_found: ${{ inputs.policy_found }}
          policy_scope: ${{ inputs.policy_scope }}
          policy_path: ${{ inputs.policy_path }}
        env:
          GEMINI_API_KEY: ${{ secrets.GEMINI_API_KEY }}

      - name: Upload batch review artifact
        uses: actions/upload-artifact@v4
        with:
          name: review-batch-${{ fromJson(inputs.batch_json).id }}
          path: .
          if-no-files-found: warn

      - name: Validate batch review artifact structure
        shell: bash
        run: |
          echo "üîç Validating batch review artifact structure..."
          
          # Safely get batch ID for context with error handling
          BATCH_ID=$(echo '${{ inputs.batch_json }}' | jq -r '.id // "unknown"' 2>/dev/null || echo 'unknown')
          echo "Validating batch $BATCH_ID"
          
          # Check for expected files in current directory
          echo "Current directory contents:"
          ls -la || echo "‚ö†Ô∏è  WARNING: ls command failed"
          
          # Check for summary.json
          if [ ! -f "summary.json" ]; then
            echo "‚ùå ERROR: summary.json not found in batch output"
            exit 1
          fi
          
          # Safely check if jq is available
          if ! command -v jq &> /dev/null; then
            echo "‚ö†Ô∏è  WARNING: jq not available, skipping JSON validation"
            echo "‚úÖ Summary.json exists (validation skipped)"
            TOTAL="unknown"
            PROCESSED="unknown"
            BATCH_ID_IN_SUMMARY="unknown"
          else
            # Validate summary.json structure
            if ! jq -e '.' summary.json > /dev/null 2>&1; then
              echo "‚ùå ERROR: summary.json is not valid JSON"
              exit 1
            fi
            
            # Check summary.json fields with error handling
            TOTAL=$(jq -r '.total // 0' summary.json 2>/dev/null || echo 'error')
            PROCESSED=$(jq -r '.processed // 0' summary.json 2>/dev/null || echo 'error')
            BATCH_ID_IN_SUMMARY=$(jq -r '.batch_id // "unknown"' summary.json 2>/dev/null || echo 'error')
          fi
          
          echo "‚úÖ Summary.json validation passed:"
          echo "   - Total files: $TOTAL"
          echo "   - Processed files: $PROCESSED"
          echo "   - Batch ID: $BATCH_ID_IN_SUMMARY"
          
          # Check for review files (should be .md files, not summary.json)
          REVIEW_FILES=$(find . -name "*.md" -type f | grep -v summary.json | wc -l 2>/dev/null || echo '0')
          echo "‚úÖ Found $REVIEW_FILES review files"
          
          # Check for prompt-log directory
          if [ -d "prompt-log" ]; then
            PROMPT_COUNT=$(find prompt-log -name "*.md" -type f | wc -l 2>/dev/null || echo '0')
            echo "‚úÖ Found $PROMPT_COUNT debug prompt files in prompt-log/"
          else
            echo "‚ö†Ô∏è  WARNING: prompt-log directory not found"
          fi
          
          # Validate flat structure (no nested reviews directory)
          if [ -d "reviews" ]; then
            echo "‚ùå ERROR: Found nested 'reviews' directory - expected flat structure"
            exit 1
          fi
          
          echo "‚úÖ Batch review artifact validation passed"
