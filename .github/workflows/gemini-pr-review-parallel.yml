name: Gemini PR Review - Parallel

on:
  workflow_call:
    inputs:
      post_mode:
        type: string
        required: false
        default: 'both'
        description: 'How to publish results: artifact_only, commit, both, comment'
      exclude_regex:
        type: string
        required: false
        default: '(\.github/review-results/.*)'
        description: 'Regex pattern to exclude files from review'
      max_files:
        type: string
        required: false
        default: '50'
        description: 'Maximum number of files to review'
      max_commits:
        type: string
        required: false
        default: '10'
        description: 'Maximum number of commits to analyze'
      model:
        type: string
        required: false
        default: 'gemini-2.5-pro'
        description: 'Gemini model to use for review'
      max_diff_lines:
        type: string
        required: false
        default: '3000'
        description: 'Maximum diff lines to include in prompt'
      full_file_threshold_lines:
        type: string
        required: false
        default: '800'
        description: 'File size threshold for full vs windowed content'
      window_before:
        type: string
        required: false
        default: '40'
        description: 'Lines before diff to include in windowed content'
      window_after:
        type: string
        required: false
        default: '30'
        description: 'Lines after diff to include in windowed content'
      merge_gap_tolerance:
        type: string
        required: false
        default: '10'
        description: 'Gap tolerance for merging diff hunks'
      max_windowed_lines:
        type: string
        required: false
        default: '800'
        description: 'Maximum lines in windowed content'
      policy_path:
        type: string
        required: false
        default: '.github/review/REVIEW_POLICY.md'
        description: 'Path to review policy file'
      control_repo_ref:
        type: string
        required: false
        default: 'main'
        description: 'Branch/tag of .github control repo to use'
      batch_size:
        type: string
        required: false
        default: '5'
        description: 'Number of files per batch'
      max_parallel_batches:
        type: string
        required: false
        default: '3'
        description: 'Maximum parallel batches to run'
    secrets:
      GEMINI_API_KEY:
        required: true
      PAT_TOKEN:
        required: true

jobs:
  precheck:
    runs-on: ubuntu-latest
    steps:
      - name: Precheck
        uses: softlink-dev/.github/.github/actions/precheck@main
        with:
          post_mode: ${{ inputs.post_mode }}

  prepare:
    name: Build review manifest
    needs: precheck
    uses: softlink-dev/.github/.github/workflows/_prepare.yml@main
    with:
      exclude_regex: ${{ inputs.exclude_regex }}
      max_files: ${{ inputs.max_files }}
      max_commits: ${{ inputs.max_commits }}
      policy_path: ${{ inputs.policy_path }}
      control_repo_ref: ${{ inputs.control_repo_ref }}
      batch_size: ${{ inputs.batch_size }}
      max_parallel_batches: ${{ inputs.max_parallel_batches }}
    secrets: inherit

  review:
    name: Review Batch
    needs: prepare
    strategy:
      max-parallel: ${{ fromJson(inputs.max_parallel_batches) }}
      fail-fast: false
      matrix:
        batch: ${{ fromJson(needs.prepare.outputs.batches || '[]') }}
    uses: softlink-dev/.github/.github/workflows/_review-batch.yml@main
    with:
      batch_json: ${{ toJson(matrix.batch) }}
      model: ${{ inputs.model }}
      max_diff_lines: ${{ inputs.max_diff_lines }}
      full_file_threshold_lines: ${{ inputs.full_file_threshold_lines }}
      window_before: ${{ inputs.window_before }}
      window_after: ${{ inputs.window_after }}
      merge_gap_tolerance: ${{ inputs.merge_gap_tolerance }}
      max_windowed_lines: ${{ inputs.max_windowed_lines }}
      policy_path: ${{ needs.prepare.outputs.policy_path_resolved }}
      policy_found: ${{ needs.prepare.outputs.policy_found }}
      policy_scope: ${{ needs.prepare.outputs.policy_scope }}
      control_repo_ref: ${{ inputs.control_repo_ref }}
    secrets: inherit

  summarize:
    name: Summarize and publish review
    needs: [prepare, review]
    if: ${{ always() && needs.prepare.result == 'success' }}
    uses: softlink-dev/.github/.github/workflows/_summarize.yml@main
    with:
      post_mode: ${{ inputs.post_mode }}
    secrets: inherit
