name: Summarize & Publish

on:
  workflow_call:
    inputs:
      post_mode: { type: string, required: true } # artifact_only | commit | both | comment
    secrets:
      PAT_TOKEN: { required: true }

jobs:
  summarize:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout PR head (for optional commit)
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          ref: ${{ github.event.pull_request.head.ref || github.ref }}

      - name: Download all review artifacts
        uses: actions/download-artifact@v4
        with:
          path: all-reviews
          pattern: review-batch-*
          merge-multiple: true

      - name: Stitch reports
        uses: softlink-dev/.github/.github/actions/stitch-reports@main

      - name: Upload compiled summary artifacts
        uses: actions/upload-artifact@v4
        with:
          name: ai-review-compiled
          path: compiled/

      - name: Commit review results into PR branch (if allowed and requested)
        if: |
          github.event_name == 'pull_request' &&
          (inputs.post_mode == 'commit' || inputs.post_mode == 'both')
        env:
          PAT: ${{ secrets.PAT_TOKEN }}
        shell: bash
        run: |
          set -euo pipefail
          
          # Debug: Log the current state
          echo "::debug::Starting commit step"
          echo "::debug::Event name: ${{ github.event_name }}"
          echo "::debug::Post mode: ${{ inputs.post_mode }}"
          echo "::debug::PR number: ${{ github.event.pull_request.number }}"
          echo "::debug::PR head ref: ${{ github.event.pull_request.head.ref }}"
          echo "::debug::Is fork: ${{ github.event.pull_request.head.repo.fork }}"
          
          OUT_DIR=".github/review-results"
          echo "::debug::Creating output directory: $OUT_DIR"
          mkdir -p "$OUT_DIR"
          
          echo "::debug::Checking if compiled directory exists and has content"
          ls -la compiled/ || echo "::debug::compiled directory not found or empty"
          
          echo "::debug::Copying files from compiled/ to $OUT_DIR/"
          cp -r compiled/* "$OUT_DIR"/
          
          echo "::debug::Files created in $OUT_DIR:"
          ls -la "$OUT_DIR"/
          
          # Create flat structure with PR number
          echo "::debug::Creating flat structure with PR number..."
          PR_NUMBER="${{ github.event.pull_request.number }}"
          PR_DIR="PR#${PR_NUMBER}"
          
          # Create PR-specific directory
          mkdir -p "$OUT_DIR/$PR_DIR"
          
          # Move and rename files to create flat structure
          if [ -f "$OUT_DIR/PR-REPORT.md" ]; then
            echo "::debug::Moving PR-REPORT.md to $OUT_DIR/$PR_DIR/DETAILED-REVIEW.md"
            mv "$OUT_DIR/PR-REPORT.md" "$OUT_DIR/$PR_DIR/DETAILED-REVIEW.md"
          fi
          
          if [ -f "$OUT_DIR/SUMMARY.md" ]; then
            echo "::debug::Moving SUMMARY.md to $OUT_DIR/$PR_DIR/SUMMARY.md"
            mv "$OUT_DIR/SUMMARY.md" "$OUT_DIR/$PR_DIR/SUMMARY.md"
          fi
          
          # Remove any commit-specific directories (we want flat structure)
          for commit_dir in "$OUT_DIR"/*/; do
            if [ -d "$commit_dir" ] && [ "$(basename "$commit_dir")" != "$PR_DIR" ]; then
              echo "::debug::Removing commit directory: $commit_dir"
              rm -rf "$commit_dir"
            fi
          done
          
          echo "::debug::Final structure in $OUT_DIR:"
          ls -la "$OUT_DIR"/
          echo "::debug::Contents of $OUT_DIR/$PR_DIR:"
          ls -la "$OUT_DIR/$PR_DIR/"

          git config user.name "github-actions[bot]"
          git config user.email "41898282+github-actions[bot]@users.noreply.github.com"

          current_branch="${{ github.event.pull_request.head.ref || '' }}"
          retries=3
          while [ $retries -gt 0 ]; do
            git remote set-url origin "https://x-access-token:${PAT}@github.com/${{ github.repository }}.git"
            if [ -n "$current_branch" ]; then
              git fetch origin "$current_branch" --depth=1 || true
              git pull --rebase origin "$current_branch" || true
            fi
            git add "$OUT_DIR" || true
            if git commit -m "chore: add AI review results for PR #${{ github.event.pull_request.number }} [skip ci]"; then
              echo "::debug::Commit successful, attempting push..."
              if git push; then
                echo "::debug::Push successful!"
                echo "Committed and pushed review results"
                echo "::debug::Files should be available at: https://github.com/${{ github.repository }}/tree/${{ github.event.pull_request.head.ref }}/.github/review-results/"
                break
              else
                echo "::debug::Push failed!"
              fi
            else
              echo "::debug::Commit failed!"
            fi
            retries=$((retries - 1))
            echo "Retrying git ops... ($retries left)"; sleep 5
          done

      - name: Post review as PR comment
        if: |
          github.event_name == 'pull_request' &&
          (inputs.post_mode == 'commit' || inputs.post_mode == 'both' || inputs.post_mode == 'comment')
        env:
          PAT: ${{ secrets.PAT_TOKEN }}
        shell: bash
        run: |
          set -euo pipefail
          
          if [ -f "compiled/PR-REPORT.md" ]; then
            # Read the PR report content
            REPORT_CONTENT=$(cat compiled/PR-REPORT.md)
            
            # Truncate if too long (GitHub has limits)
            MAX_LENGTH=65535
            if [ ${#REPORT_CONTENT} -gt $MAX_LENGTH ]; then
              REPORT_CONTENT="${REPORT_CONTENT:0:$((MAX_LENGTH-100))}...\n\n*[Review truncated due to length limits. Full review available in artifacts and committed files.]*"
            fi
            
            # Create comment body
            COMMENT_BODY="## ðŸ¤– AI Code Review Results
            
            $REPORT_CONTENT
            
            ---
            *Review generated by Gemini AI. Full detailed review available in the workflow artifacts.*"
            
            # Post comment using GitHub API
            curl -X POST \
              -H "Authorization: token $PAT" \
              -H "Accept: application/vnd.github.v3+json" \
              -d "{\"body\":$(echo "$COMMENT_BODY" | jq -Rs .)}" \
              "https://api.github.com/repos/${{ github.repository }}/issues/${{ github.event.pull_request.number }}/comments"
          else
                         echo "No PR report found to post as comment"
           fi

      - name: Note comment-only mode
        if: |
          github.event_name == 'pull_request' &&
          !github.event.pull_request.head.repo.fork &&
          inputs.post_mode == 'comment'
        run: echo "::notice::Review posted as PR comment only. Files not committed to repository."

      - name: Note fork fallback / artifact-only
        if: |
          github.event_name == 'pull_request' &&
          ( github.event.pull_request.head.repo.fork ||
            inputs.post_mode == 'artifact_only' )
        run: echo "::notice::Results published as artifacts. Commit skipped."
