name: Gemini PR Review (Deadlock-Optimized)

on:
  workflow_call:
    inputs:
      model: { type: string, default: gemini-2.5-pro }
      max_files: { type: string, default: "15" }
      max_diff_lines: { type: string, default: "4000" }
      exclude_regex:
        type: string
        default: "(^|/)(dist|build|node_modules|coverage|out|bin|obj|target|vendor)/|(\\.github/review-results/)|(\\.lock$)|(\\.min\\.(js|css)$)|(\\.(map|png|jpe?g|gif|svg|pdf|zip|tar|gz|7z|ico)$)"
      policy_path: { type: string, default: "softlink-dev/.github/.github/review/REVIEW_POLICY.md" }
      control_repo_ref: { type: string, default: main }
      full_file_threshold_lines: { type: string, default: "1200" }
      window_before: { type: string, default: "60" }
      window_after: { type: string, default: "40" }
      merge_gap_tolerance: { type: string, default: "10" }
      max_windowed_lines: { type: string, default: "1200" }
      max_commits: { type: string, default: "20" }
      post_mode: { type: string, default: "both" } # artifact_only | commit | both | comment
      batch_size: { type: string, default: "3" }
      max_parallel_batches: { type: string, default: "2" }
      force_review: { type: boolean, default: true }
      min_lines_threshold: { type: string, default: "15" }
      
    secrets:
      GEMINI_API_KEY: { required: true }
      PAT_TOKEN: { required: true }

permissions:
  contents: write
  pull-requests: write
  actions: write

concurrency:
  group: pr-${{ github.event.pull_request.number || github.run_id }}
  cancel-in-progress: true

jobs:
  precheck:
    name: decide if review is needed
    runs-on: ubuntu-latest
    outputs:
      should_run: ${{ steps.gate.outputs.should_run }}
      files_changed: ${{ steps.gate.outputs.files_changed }}
    steps:
      - id: gate
        uses:  softlink-dev/.github/.github/actions/precheck@main
        with:
          force_review: ${{ inputs.force_review }}
          min_lines_threshold: ${{ inputs.min_lines_threshold }}

  prepare:
    name: Build review manifest
    needs: precheck
    if: needs.precheck.outputs.should_run == 'true'
    uses:  softlink-dev/.github/.github/workflows/_prepare.yml@main
    with:
      exclude_regex: ${{ inputs.exclude_regex }}
      max_files: ${{ inputs.max_files }}
      max_commits: ${{ inputs.max_commits }}
      policy_path: ${{ inputs.policy_path }}
      control_repo_ref: ${{ inputs.control_repo_ref }}
      batch_size: ${{ inputs.batch_size }}
      max_parallel_batches: ${{ inputs.max_parallel_batches }}
    secrets: inherit

  review:
    name: Review Batch
    needs: prepare
    strategy:
      max-parallel: ${{ fromJson(inputs.max_parallel_batches) }}
      fail-fast: false
      matrix:
        batch: ${{ fromJson(needs.prepare.outputs.batches || '[]') }}
    uses: softlink-dev/.github/.github/workflows/_review-batch.yml@main
    with:
      batch_json: ${{ toJson(matrix.batch) }}
      model: ${{ inputs.model }}
      max_diff_lines: ${{ inputs.max_diff_lines }}
      full_file_threshold_lines: ${{ inputs.full_file_threshold_lines }}
      window_before: ${{ inputs.window_before }}
      window_after: ${{ inputs.window_after }}
      merge_gap_tolerance: ${{ inputs.merge_gap_tolerance }}
      max_windowed_lines: ${{ inputs.max_windowed_lines }}
      policy_path: ${{ needs.prepare.outputs.policy_path_resolved }}
      policy_found: ${{ needs.prepare.outputs.policy_found }}
      policy_scope: ${{ needs.prepare.outputs.policy_scope }}
      control_repo_ref: ${{ inputs.control_repo_ref }}
    secrets: inherit

  summarize:
    name: Summarize and publish review
    needs: [prepare, review]
    if: ${{ always() && needs.prepare.result == 'success' }}
    uses: softlink-dev/.github/.github/workflows/_summarize.yml@main
    with:
      post_mode: "both"  # TEMPORARILY HARDCODED - IGNORES INPUT VALUE
    secrets: inherit
